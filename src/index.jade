doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Introduction to Scala &amp; Play

    link(rel='stylesheet', type='text/css', href='build/build.css')
    base(target='_blank')
  body

    article

      section(data-bespoke-state='intro')
        div.container
          div.col.scala.logo
          div.col.play.logo

      section.logo.logo--scala(data-bespoke-state='scala')

      section(data-bespoke-state='scala')
        h2 Why
        h1.scala Scala
        h2 is Awesome?

      section(data-bespoke-state='scala')
        h2 Why Scala?
        ul.bullet
          li Fast
          li Concise
          li Type Safe
          li Type Inference
          li Functional
          li Pure Object Oriented
  
      section(data-bespoke-state='scala')
        h2 Why Scala?
        ul.bullet
          li Extensible
          li Built on JVM
          li Pattern Matching
          li Lazy Evaluation
          li Stream
          li Easy Parallelism

      section(data-bespoke-state='scala')
        h2 How Fast?
        // http://benchmarksgame.alioth.debian.org/u32/which-programs-are-fastest.php
        h3 C &gt; Java &gt; Scala &gt;&gt; PHP, Ruby, Python

      section(data-bespoke-state='scala')
        h2 How Concise?

      section(data-bespoke-state='scala')
        h2 Java
        pre.language-java
          code.
            public class Person {
              private final String firstName;
              private final String lastName;
              public Person(String firstName, String lastName) {
                this.firstName = firstName;
                this.lastName = lastName;
              }
              public String getFirstName() {
                return firstName;
              }
              public String getLastName() {
                return lastName;
              }
            }

      section(data-bespoke-state='scala')
        h2.scala Scala
        pre.language-scala
          code.
            case class Person(firstName: String, lastName: String)

      section(data-bespoke-state='scala')
        h2 Java
        a(href='https://gist.github.com/torifat/353d45b1058b93a9ec85') https://gist.github.com/torifat/353d45b1058b93a9ec85

      section(data-bespoke-state='scala')
        h2 Functional Combinators
        ul.bullet
          li map
          li foreach
          li filter
          li zip
          li partition

      section(data-bespoke-state='scala')
        h2 Functional Combinators
        ul.bullet
          li find
          li drop and dropWhile
          li foldRight and foldLeft
          li flatten
          li flatMap

      section(data-bespoke-state='scala')
        h2 Functional Combinators
        pre.language-scala
          code.
            val list = (1 to 10).toList
            //> list  : List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

            list.filter(5 <)
            //> res0: List[Int] = List(6, 7, 8, 9, 10)

            list.fold(0)((a, n) => a + n)
            list.fold(0)(_ + _)
            //> res1: Int = 55

            list.map(x => x * x)
            //> res2: List[Int] = List(1, 4, 9, 16, 25, 36, 49, 64, 81, 100)

      section(data-bespoke-state='scala')
        h2 Curring
        pre.language-scala
          code.
            def power(x: Double)(y: Int) = Math.pow(x, y)
            //> power: (x: Double)(y: Int)Double

            list.map(power(2))
            //> res3: List[Double] = List(2.0, 4.0, 8.0, 16.0, 32.0, 64.0,
            //| 128.0, 256.0, 512.0, 1024.0)

            def square = power(2) _
            //> square: => Int => Double

            list.map(square)

      section(data-bespoke-state='scala')
        h2 Tail Recursion
        pre.language-scala
          code.
            def factorial(n: Int): Int = {
              if (n == 0)
                1
              else
                n * factorial(n - 1)
            }

      section(data-bespoke-state='scala')
        h2 Tail Recursion
        pre.language-scala
          code.
            def factorial(n: Int): Int = if (n == 0) 1 else n * factorial(n - 1)
            
            factorial(3)
            // if (3 == 0) 1 else 3 * factorial(3 - 1)
            // 3 * factorial(2)
            // 3 * (2 * factorial(1))
            // 3 * (2 * (1 * factorial(0)))
            // 3 * (2 * (1 * 1))
            // 6

      section(data-bespoke-state='scala')
        h2 Tail Recursion
        pre.language-scala
          code.
            @tailrec
            def factorial(i: Int): Int = {
              def fact(i: Int, accumulator: Int): Int = {
                if (i <= 1)
                  accumulator
                else
                  fact(i - 1, i * accumulator)
              }
              fact(i, 1)
            }

      section(data-bespoke-state='scala')
        h2 Trait

      section.logo.logo--trait-01(data-bespoke-state='scala')

      section.logo.logo--trait-02(data-bespoke-state='scala')

      section.logo.logo--trait-03(data-bespoke-state='scala')

      section(data-bespoke-state='scala')
        h2 Trait
        pre.language-scala
          code.
            class Animal {}
            trait Walking { def walk = println("walking...") }
            trait Swimming { def swim = println("swimming...") }
            trait Flying { def fly = println("flying...") }

            class Duck extends Animal with Walking with Swimming {}
            d.walk
            //> walking...
            d.swim  
            //> swimming...

      section(data-bespoke-state='scala')
        h2 Trait
        pre.language-scala
          code.
            val superDuck = new Duck with Flying
            superDuck.walk
            //> walking...
            superDuck.swim  
            //> swimming...
            superDuck.fly
            //> flying...

      section(data-bespoke-state='scala')
        h2 Extensible
        pre.language-scala
          code.
            implicit class IntWithTimes(i: Int) {
              def times(f: => Unit) = (1 to i) foreach (x => f)
            }

            5 times println("Welcome to the Scala worksheet")

            // 5 days ago
            // 5 days before
            // 10 years back

      section(data-bespoke-state='scala')
        h2 Pattern Matching
        pre.language-scala
          code.
            abstract class Expr
            case class Number(n: Int) extends Expr
            case class Sum(e1: Expr, e2: Expr) extends Expr

            def eval(e: Expr): Int = e match {
              case Number(n) => n
              case Sum(l, r) => eval(l) + eval(r)
            }

            eval(Sum(Sum(Number(1), Number(2)), Number(3)))
            //> res3: Int = 6

      section(data-bespoke-state='scala')
        h2 Lazy Evaluation
        pre.language-scala
          code.
            def expr = {
              val x = { print("x"); 1 }
              lazy val y = { print("y"); 2 }
              def z = { print("z"); 3 }
              z+y+x+z+y+x
            }
            expr

      section(data-bespoke-state='scala')
        h2 Stream
        pre.language-scala
          code.
            def from(n: Int): Stream[Int] = n #:: from(n+1)

      section(data-bespoke-state='scala')
        h2 Stream
        pre.language-scala
          code.
            def from(n: Int): Stream[Int] = n #:: from(n+1)
            
            def sieve(s: Stream[Int]): Stream[Int] =
              s.head #:: sieve(s.tail filter (_ % s.head != 0))
            
            val primes = sieve(from(2))
            
            (primes take 100).toList
            // Will return first 100 primes

      section(data-bespoke-state='scala')
        h2 Easy Parallelism
        ul.bullet
          li Parallel Collections
          li Thread-based Concurrency 
            em (derived from Java)
          li Actor-based Concurrency 
            em (inspired by Erlang)
          li Software Transactional Memory 
            em (basis of concurrency in Clojure)

      section(data-bespoke-state='scala')
        h2 Parallel Collections
        pre.language-scala
          code.
            val list = (1 to 1000000).toList.par
            
            // Filter even numbers
            list.filter(_ % 2 == 0)

            // Filter odd numbers
            list.filter(_ % 2 == 1)

      section(data-bespoke-state='scala')
        h2 Actor-based Concurrency
        pre.language-scala
          code.
            def heavyTask = {
              Thread.sleep(1000L)
              "Doing the HEAVY TASK"
            }

            val start = System.nanoTime
            for (i <- 1 to 10) println(heavyTask)
            val end = System.nanoTime
            
            println("Time: " + (end - start)/1000000000.0)
            //> Time: 10.033465

      section(data-bespoke-state='scala')
        h2 Actor-based Concurrency
        pre.language-scala
          code.
            import scala.actors._
            import Actor._

            val caller = self
            val start = System.nanoTime
            for (i <- 1 to 10) actor { caller ! heavyTask }
            for (i <- 1 to 10) receive { case msg => println(msg) }
            val end = System.nanoTime
            println("Time: " + (end - start)/1000000000.0)
            //> Time: 2.077815

      section(data-bespoke-state='scala')
        h3.scala We have just scratched the surface

      section(data-bespoke-state='scala')
        blockquote If I were to pick a language today other than Java, it would be Scala - 
          span James Gosling

      section.logo.logo--play(data-bespoke-state='play')

      section(data-bespoke-state='play')
        h2 Why
        h1.play Play
        h2 is Awesome?

      section(data-bespoke-state='play')
        h2 Why?
        ul.bullet
          li RAD
          li Java &amp; Scala
          li Reactive
          li Scalable
          li Flexible

      section(data-bespoke-state='play')
        h2 New Project
        pre.language-bash
          code $ activator new my-project

      section(data-bespoke-state='play')
        h2 New Project
        pre.language-bash
          code.
            Choose from these featured templates or enter a template name:
              1) minimal-akka-java-seed
              2) minimal-akka-scala-seed
              3) minimal-java
              4) minimal-scala
              5) play-java
              6) play-scala
            (hit tab to see a list of all templates)
            >

      section(data-bespoke-state='play')
        h1.demo.play DEMO

      section(data-bespoke-state='play')
        h1.thanks Thank You
        h3
          a.twitter(href='https://twitter.com/rifat') @rifat </br>
          a.fb(href='https://fb.me/rifat') fb.me/rifat
        img.avatar.avatar--small(src='images/profile.jpg')

  script(src='build/build.js')
